Dictionary Methods Cheat Sheet
Dictionary Methods Cheat Sheet
Definition

x = {key1:value1, key2:value2}

Operations

len(dictionary) - Returns the number of items in the dictionary
for key in dictionary - Iterates over each key in the dictionary
for key, value in dictionary.items() - Iterates over each key,value pair in the dictionary
if key in dictionary - Checks whether the key is in the dictionary
dictionary[key] - Accesses the item with key key of the dictionary
dictionary[key] = value - Sets the value associated with key
del dictionary[key] - Removes the item with key key from the dictionary
Methods

dict.get(key, default) - Returns the element corresponding to key, or default if it's not present
dict.keys() - Returns a sequence containing the keys in the dictionary
dict.values() - Returns a sequence containing the values in the dictionary
dict.update(other_dictionary) - Updates the dictionary with the items coming from the other dictionary.
Existing entries will be replaced; new entries will be added.
dict.clear() - Removes all the items of the dictionary
def file_count (text):
    result = {}
    for letter in text:
        if letter not in result:
            result[letter] = 0
            result[letter] += 1
    return result

file_count("Kolawole")


def count_letters(text):
  result = {}
  # Go through each letter in the text
  for letter in text.lower():
    # Check if the letter needs to be counted or not
    if letter.isalpha():
    # Add or increment the value in the dictionary
      lettercount = text.lower().count(letter)
      result[letter] = lettercount
  return result

print(count_letters("AaBbCc"))
# Should be {'a': 2, 'b': 2, 'c': 2}

print(count_letters("Math is fun! 2+2=4"))
# Should be {'m': 1, 'a': 1, 't': 1, 'h': 1, 'i': 1, 's': 1, 'f': 1, 'u': 1, 'n': 1}

print(count_letters("This is a sentence."))
# Should be {'t': 2, 'h': 1, 'i': 2, 's': 3, 'a': 1, 'e': 3, 'n': 2, 'c': 1}

class Flower():
    color = ""
    smell = ""

rose = Flower()
rose.color = "red"
violet = Flower()
violet.color = "blue"
kola = Flower()
kola.smell = "Excellent"

print ("violet are {}.".format(violet.color))
print ("Rose are {} and smells {}".format(rose.color, kola.smell))

class Apple:
    def __init__(self, color, flavor):
     self.color = color
     self.flavor = flavor

kola = Apple("red", "sweet")
print(kola.flavor, kola.color)

n addition to the __init__ constructor special method, there is also the __str__ special method.
This method allows us to define how an instance of an object will be printed when it’s passed to the print() function.
 If an object doesn’t have this special method defined, it will wind up using the default representation,
 which will print the position of the object in memory. Not super useful. Here is our Apple class, with the __str__ method added:
 class Apple:
...     def __init__(self, color, flavor):
...         self.color = color
...         self.flavor = flavor
...     def __str__(self):
...         return "This apple is {} and its flavor is {}".format(self.color, self.flavor)
...